generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          String      @default("USER")
  passwordHash  String?
  accounts      Account[]
  tickets       Ticket[]
  feedback      Feedback[]
  orders        Order[]
  sessions      Session[]
  carts         Cart[]
  wishlists     Wishlist[]
  reviews       Review[]
  addresses     UserAddress[]
  paymentMethods PaymentMethod[]
  searchEvents  SearchEvent[]
  auditLogs     AuditLog[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([role])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String
  heroImage String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String       @id @default(cuid())
  sku           String       @unique
  name          String
  slug          String       @unique
  description   String?
  heroImageUrl  String?
  gallery       Json?
  specs         Json?
  metadata      Json?
  brand         String?
  tags          String[]
  featured      Boolean      @default(false)
  popularity    Int          @default(0)
  status        String       @default("active")
  active        Boolean      @default(true)
  categoryId    String?
  category      Category?    @relation(fields: [categoryId], references: [id])
  prices        Price[]
  inventory     Inventory?
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  embeddings    KBEmbedding[]
  searchEvents  SearchEvent[]
  wishlistItems WishlistItem[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  vector        Unsupported("vector(768)")?

  @@index([featured])
  @@index([status])
}

model Inventory {
  id        String  @id @default(cuid())
  productId String  @unique
  quantity  Int
  threshold Int     @default(5)
  product   Product @relation(fields: [productId], references: [id])
}

model Price {
  id            String   @id @default(cuid())
  productId     String
  currency      String   @default("usd")
  amount        Decimal  @db.Decimal(10, 2)
  active        Boolean  @default(true)
  stripePriceId String?
  product       Product  @relation(fields: [productId], references: [id])
  createdAt     DateTime @default(now())
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  status       String      @default("processing")
  totalAmount  Decimal     @db.Decimal(12, 2)
  currency     String      @default("usd")
  items        OrderItem[]
  shippingInfo Json?
  paymentIntent String?
  user         User        @relation(fields: [userId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitAmount Decimal  @db.Decimal(10, 2)
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id                 String     @id @default(cuid())
  userId             String?
  email              String?
  status             String     @default("active")
  currency           String     @default("usd")
  items              CartItem[]
  couponId           String?
  coupon             Coupon?    @relation(fields: [couponId], references: [id])
  recoveryToken      String?    @unique
  recoverySentAt     DateTime?
  recoveryRedeemedAt DateTime?
  user               User?      @relation(fields: [userId], references: [id])
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  rating    Int
  title     String
  body      String
  createdAt DateTime  @default(now())
  product   Product   @relation(fields: [productId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
}

model Ticket {
  id          String   @id @default(cuid())
  userId      String?
  email       String
  subject     String
  sentiment   String?
  status      String   @default("open")
  priority    String   @default("normal")
  transcript  Json?
  assignedTo  String?
  slaMinutes  Int      @default(60)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])

  @@index([status])
}

model UserAddress {
  id          String   @id @default(cuid())
  userId      String
  label       String?
  line1       String
  line2       String?
  city        String
  state       String?
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([userId, label])
}

model PaymentMethod {
  id         String   @id @default(cuid())
  userId     String
  brand      String
  last4      String
  expMonth   Int
  expYear    Int
  token      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([userId, last4, brand])
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  sentiment String?
  rating    Int?
  message   String?
  context   Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model KBArticle {
  id         String   @id @default(cuid())
  slug       String   @unique
  title      String
  body       String
  category   String
  metadata   Json?
  embeddings KBEmbedding[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model KBEmbedding {
  id          String   @id @default(cuid())
  articleId   String?
  productId   String?
  contentType String
  vector      Unsupported("vector(768)")
  article     KBArticle? @relation(fields: [articleId], references: [id])
  product     Product?   @relation(fields: [productId], references: [id])
  createdAt   DateTime   @default(now())
}

model SearchEvent {
  id          String   @id @default(cuid())
  userId      String?
  productId   String?
  query       String
  mode        String
  zeroResults Boolean   @default(false)
  metadata    Json?
  createdAt   DateTime  @default(now())
  user        User?     @relation(fields: [userId], references: [id])
  product     Product?  @relation(fields: [productId], references: [id])
}

model FeatureFlag {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  scope     String   @default("global")
  updatedBy String?
  updatedAt DateTime @updatedAt
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  percentage  Int?
  amountOff   Decimal? @db.Decimal(10, 2)
  active      Boolean  @default(true)
  appliesTo   String?  @default("all")
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  carts       Cart[]
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  user      User?   @relation(fields: [userId], references: [id])
}
